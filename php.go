package main

import (
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	deprecationComment = "// Deprecated: Do not use."
)

var methodSets = make(map[string]int)

// generateFile generates a _gin.pb.go file.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + ".pb.php"
	namespace := string(file.Desc.Package())
	namespace = strings.Join(strings.Split(namespace,"."),"/")
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("<?php")
	g.P("// Code generated by github.com/kongdeqiang/protoc-gen-php. DO NOT EDIT.")
	g.P()
	g.P("namespace " , namespace, ";")
	g.P()
	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the github.com/kongdeqiang/protoc-gen-php package it is being compiled against.")
	g.P()
	for _, service := range file.Services {
		genClass(gen, file, g, service)
	}
	return g
}

func genClass(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, s *protogen.Service) {
	if s.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	// HTTP Server.
	sd := &service{
		Name:     s.GoName,
		FullName: string(s.Desc.FullName()),
		FilePath: file.Desc.Path(),
	}
	for _, method := range s.Methods {
		sd.Methods = append(sd.Methods, genMethod(method)...)
	}
	g.P(sd.execute())
}

func genMethod(m *protogen.Method) []*method {
	var methods []*method
	md := &method{
		Name:    m.GoName,
		Request: m.Input.GoIdent.GoName,
		Reply:   m.Output.GoIdent.GoName,
	}
	methods = append(methods, md)
	return methods
}
